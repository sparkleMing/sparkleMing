package com.sumixer.ys.api.dao;

import com.sumixer.ys.api.entity.YsGoods;
import com.sumixer.ys.api.entity.YsStoreGoods;
import com.sumixer.ys.api.entity.YsStoreGoodsExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface YsStoreGoodsMapper {
    @SelectProvider(type=YsStoreGoodsSqlProvider.class, method="countByExample")
    long countByExample(YsStoreGoodsExample example);

    @DeleteProvider(type=YsStoreGoodsSqlProvider.class, method="deleteByExample")
    int deleteByExample(YsStoreGoodsExample example);

    @Delete({
        "delete from ys_store_goods",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    @Insert({
        "insert into ys_store_goods (goods_id, publish, ",
        "stock, store_id)",
        "values (#{goodsId,jdbcType=VARCHAR}, #{publish,jdbcType=INTEGER}, ",
        "#{stock,jdbcType=DOUBLE}, #{storeId,jdbcType=VARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(YsStoreGoods record);

    @InsertProvider(type=YsStoreGoodsSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insertSelective(YsStoreGoods record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ys_store_goods
     *
     * @mbg.generated
     * @project https://github.com/itfsw/mybatis-generator-plugin
     */
    YsStoreGoods selectOneByExample(YsStoreGoodsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ys_store_goods
     *
     * @mbg.generated
     * @project https://github.com/itfsw/mybatis-generator-plugin
     */
    YsStoreGoods selectOneByExampleSelective(@Param("example") YsStoreGoodsExample example, @Param("selective") YsStoreGoods.Column ... selective);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ys_store_goods
     *
     * @mbg.generated
     * @project https://github.com/itfsw/mybatis-generator-plugin
     */
    List<YsStoreGoods> selectByExampleSelective(@Param("example") YsStoreGoodsExample example, @Param("selective") YsStoreGoods.Column ... selective);

    @SelectProvider(type=YsStoreGoodsSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="goods_id", property="goodsId", jdbcType=JdbcType.VARCHAR),
        @Result(column="publish", property="publish", jdbcType=JdbcType.INTEGER),
        @Result(column="stock", property="stock", jdbcType=JdbcType.DOUBLE),
        @Result(column="store_id", property="storeId", jdbcType=JdbcType.VARCHAR)
    })
    List<YsStoreGoods> selectByExample(YsStoreGoodsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ys_store_goods
     *
     * @mbg.generated
     * @project https://github.com/itfsw/mybatis-generator-plugin
     */
    YsStoreGoods selectByPrimaryKeySelective(@Param("id") Integer id, @Param("selective") YsStoreGoods.Column ... selective);

    @Select({
        "select",
        "id, goods_id, publish, stock, store_id",
        "from ys_store_goods",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="goods_id", property="goodsId", jdbcType=JdbcType.VARCHAR),
        @Result(column="publish", property="publish", jdbcType=JdbcType.INTEGER),
        @Result(column="stock", property="stock", jdbcType=JdbcType.DOUBLE),
        @Result(column="store_id", property="storeId", jdbcType=JdbcType.VARCHAR)
    })
    YsStoreGoods selectByPrimaryKey(Integer id);

    @UpdateProvider(type=YsStoreGoodsSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") YsStoreGoods record, @Param("example") YsStoreGoodsExample example);

    @UpdateProvider(type=YsStoreGoodsSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") YsStoreGoods record, @Param("example") YsStoreGoodsExample example);

    @UpdateProvider(type=YsStoreGoodsSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(YsStoreGoods record);

    @Update({
        "update ys_store_goods",
        "set goods_id = #{goodsId,jdbcType=VARCHAR},",
          "publish = #{publish,jdbcType=INTEGER},",
          "stock = #{stock,jdbcType=DOUBLE},",
          "store_id = #{storeId,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(YsStoreGoods record);


    @Select({
            "select",
            "id, goods_id, category_id, goods_name, unit, keyword, description, cost_price, ",
            "sale_price, market_price, stock, low_stock, publish, picture, put_time",
            "from ys_goods",
            "where category_id = #{categoryId,jdbcType=VARCHAR} and publish = '1' and goods_id in",
            "(select goods_id from ys_store_goods where stock > 0 and",
            "publish = '1' and store_id = #{storeId,jdbcType=VARCHAR})"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="goods_id", property="goodsId", jdbcType=JdbcType.VARCHAR),
            @Result(column="category_id", property="categoryId", jdbcType=JdbcType.VARCHAR),
            @Result(column="goods_name", property="goodsName", jdbcType=JdbcType.VARCHAR),
            @Result(column="unit", property="unit", jdbcType=JdbcType.VARCHAR),
            @Result(column="keyword", property="keyword", jdbcType=JdbcType.VARCHAR),
            @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
            @Result(column="cost_price", property="costPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="sale_price", property="salePrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="market_price", property="marketPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="stock", property="stock", jdbcType=JdbcType.DOUBLE),
            @Result(column="low_stock", property="lowStock", jdbcType=JdbcType.DOUBLE),
            @Result(column="publish", property="publish", jdbcType=JdbcType.INTEGER),
            @Result(column="picture", property="picture", jdbcType=JdbcType.VARCHAR),
            @Result(column="put_time", property="putTime", jdbcType=JdbcType.VARCHAR)
    })
    List<YsGoods> selectPublishGoodsByCategoryId(@Param("storeId") String storeId, @Param("categoryId") String categoryId);

    @Select({
            "select",
            "id, goods_id, category_id, goods_name, unit, keyword, description, cost_price, ",
            "sale_price, market_price, stock, low_stock, publish, picture, put_time",
            "from ys_goods",
            "where publish = '1' and goods_id in",
            "(select goods_id from ys_store_goods where",
            "stock > 0 and publish = '1' and goods_id in ( #{goodsId,jdbcType=VARCHAR} )",
            "and store_id = #{storeId,jdbcType=VARCHAR})"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="goods_id", property="goodsId", jdbcType=JdbcType.VARCHAR),
            @Result(column="category_id", property="categoryId", jdbcType=JdbcType.VARCHAR),
            @Result(column="goods_name", property="goodsName", jdbcType=JdbcType.VARCHAR),
            @Result(column="unit", property="unit", jdbcType=JdbcType.VARCHAR),
            @Result(column="keyword", property="keyword", jdbcType=JdbcType.VARCHAR),
            @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
            @Result(column="cost_price", property="costPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="sale_price", property="salePrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="market_price", property="marketPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="stock", property="stock", jdbcType=JdbcType.DOUBLE),
            @Result(column="low_stock", property="lowStock", jdbcType=JdbcType.DOUBLE),
            @Result(column="publish", property="publish", jdbcType=JdbcType.INTEGER),
            @Result(column="picture", property="picture", jdbcType=JdbcType.VARCHAR),
            @Result(column="put_time", property="putTime", jdbcType=JdbcType.VARCHAR)
    })
    List<YsGoods> selectPublishedGoods(@Param("storeId") String storeId, @Param("goodsId") String goodsId);

    @Select({
            "select",
            "id, goods_id, category_id, goods_name, unit, keyword, description, cost_price, ",
            "sale_price, market_price, stock, low_stock, publish, picture, put_time",
            "from ys_goods",
            "where publish = '1' and goods_name like '%${keyword}%' and goods_id in",
            "(select goods_id from ys_store_goods where",
            "stock > 0 and publish = '1'",
            "and store_id = #{storeId,jdbcType=VARCHAR})"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="goods_id", property="goodsId", jdbcType=JdbcType.VARCHAR),
            @Result(column="category_id", property="categoryId", jdbcType=JdbcType.VARCHAR),
            @Result(column="goods_name", property="goodsName", jdbcType=JdbcType.VARCHAR),
            @Result(column="unit", property="unit", jdbcType=JdbcType.VARCHAR),
            @Result(column="keyword", property="keyword", jdbcType=JdbcType.VARCHAR),
            @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
            @Result(column="cost_price", property="costPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="sale_price", property="salePrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="market_price", property="marketPrice", jdbcType=JdbcType.DOUBLE),
            @Result(column="stock", property="stock", jdbcType=JdbcType.DOUBLE),
            @Result(column="low_stock", property="lowStock", jdbcType=JdbcType.DOUBLE),
            @Result(column="publish", property="publish", jdbcType=JdbcType.INTEGER),
            @Result(column="picture", property="picture", jdbcType=JdbcType.VARCHAR),
            @Result(column="put_time", property="putTime", jdbcType=JdbcType.VARCHAR)
    })
    List<YsGoods> searchGoods(@Param("storeId") String storeId, @Param("keyword") String keyword);


}